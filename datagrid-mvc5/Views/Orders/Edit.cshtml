@inherits System.Web.Mvc.WebViewPage
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>редактирование id=@ViewBag.Id</title>
    <script src="~/Scripts/vue.js"></script>
    <link rel="stylesheet" type="text/css" href="~/Content/vueError.css" />
</head>
<body>
    <div id="app">

        <table>
            <tr>
                @*<td>
                        <h1>авто генерация формы</h1>
                        <table style="background-color: blue">
                            <tr v-for="(item,i) in order">
                                <td> {{i}}</td>
                                <td>
                                    <input type="text" v-model="order[i]"/>
                                    <p style="color: red" type="text" v-if="errors[i]!=''">{{errors[i]}}</p>
                                </td>
                            </tr>
                        </table>

                    </td>*@
                <td>
                    <h1></h1>
                    <table>
                        <tr>
                            <td>Customer</td>
                            <td class="tooltip">
                                <select v-model="order.CustomerID" v-bind:class="{error:!errors.CustomerID==''}">
                                    <option v-for="customer in AvaialbeCustomers"
                                            :v-key="customer.Id"
                                            v-bind:value="customer.Id">
                                        {{customer.Name}}
                                    </option>
                                </select>
                                <span v-if="!errors.CustomerID==''" class="tooltiptext">{{errors.CustomerID}}</span>
                            </td>
                        </tr>
                        <tr>
                            <td>Freight</td>
                            <td class="tooltip">
                                <input type="number" v-model="order.Freight" v-bind:class="{error:!errors.Freight==''}" />
                                <span v-if="errors.Freight!==''" class="tooltiptext">{{errors.Freight}}</span>
                            </td>
                        </tr>
                        <tr>
                            <td>ShipCountry</td>
                            <td>
                                <select v-model="order.ShipCountry">
                                    <option v-for="item in AvaialbeCountrys" :v-key="item">{{item}} </option>
                                </select>
                            </td>
                        </tr>
                        <tr>
                            <td>ShipCity</td>
                            <td class="tooltip">
                                <select v-model="order.ShipCity" v-bind:class="{error:!errors.ShipCity==''}">
                                    <option v-for="city in AvaialbeCitys" :v-key="city">{{city}} </option>
                                </select>
                                <span v-if="!errors.ShipCity==''" class="tooltiptext">{{errors.ShipCity}}</span>
                            </td>
                        </tr>
                        <tr>
                            <td>ShipAddress</td>
                            <td class="tooltip">
                                <input type="text" v-model="order.ShipAddress" v-bind:class="{error:!errors.ShipAddress=='' }" />
                                <span v-if="!errors.ShipAddress==''" class="tooltiptext">{{errors.ShipAddress}}</span>
                            </td>
                        </tr>
                        <tr>
                            <td>OrderDate</td>
                            <td>
                                <input type="datetime-local" v-model="order.OrderDate" />
                                <p style="color: red" type="text" v-if="errors.OrderDate!=''">{{errors.OrderDate}}</p>
                            </td>
                        </tr>
                        <tr>
                            <td> </td>
                            <td>
                                <button v-on:click="Save()" >Save</button>
                            </td>
                        </tr>
                    </table>
                </td>
            </tr>
        </table>
    </div>

    <script>
    //Vue.component('error-cell',
    //    {
    //        props: {
    //            FieldName: String,
    //            DataField: String,
    //            FieldError: String
    //        },
    //        data: function () {

    //            return {
    //                count: 0
    //            }
    //        },
    //        template: '<tr> <td>{{FieldName}}</td><td >' +
    //            '<input type="text" v-model="DataField"  v-bind:class="{error:!FieldError==\'\' }"  />' +
    //            '<p style="color: red" type="text">{{FieldError}}</p>' +
    //            '</td></tr>'
    //    });
    new Vue({
        el: "#app",

        data: {
            id: @ViewBag.Id,
            selected: '',
            order: {
                OrderID: 0,
                CustomerID: 0,
                EmployeeID: 0,
                OrderDate: "1964-07-10T00:00:00",
                RequiredDate: "1996-07-24T00:00:00",
                ShippedDate: "1996-07-16T00:00:00",
                ShipVia: 0,
                Freight: 0,
                ShipName: "",
                ShipAddress: "",
                ShipCity: "",
                ShipRegion: "",
                ShipPostalCode: "",
                ShipCountry: ""
            },
            oldOrder: {
                //OrderID: 0,
                //CustomerID: 0,
                //EmployeeID: 0,
                //OrderDate: { type: Date, default: "1996-07-10T00:00:00" },
                //RequiredDate: "1996-07-24T00:00:00",
                //ShippedDate: "1996-07-16T00:00:00",
                //ShipVia: 0,
                //Freight: 0,
                //ShipName: "",
                //ShipAddress: "",
                //ShipCity: "",
                //ShipRegion: "",
                //ShipPostalCode: "",
                ShipCountry: ""
            },
            errors: {
                OrderID: null,
                CustomerID: null,
                EmployeeID: null,
                OrderDate: null,
                RequiredDate: null,
                ShippedDate: null,
                ShipVia: null,
                Freight: null,
                ShipName: null,
                ShipAddress: null,
                ShipCity: null,
                ShipRegion: null,
                ShipPostalCode: null,
                ShipCountry: null
            },
            IsChanged: false,
            AvaialbeCustomers: [],
            AvaialbeCitys: [],
            AvaialbeRegions: [],
            AvaialbeCountrys: []
        },
        methods: {
            fetchOrder() {
                var path = "../Orders/GetById?key=" + this.id;
                    this.fetchJson(path,json => this.order = json);
            },

            fetchCityList() {
                //Avaiable city depended on  country
                    var country = this.order.ShipCountry;
                    if (country == null || country === "") {
                        country = '';
                    }
                var path = "../Orders/AvaiableCityList?country=" + country;
                this.fetchJson(path, json => {
                                  this.AvaialbeCitys = json;
                                 //if (!this.AvaialbeCitys.includes(this.order.ShipCity)) {
                                 //    this.order.ShipCity = "";
                                 //}
                             });
            },

            fetchCountrys() {

                    var path = "../Orders/AvaiableCountrys";
                    this.fetchJson(path,jsonResult => {
                            this.AvaialbeCountrys = jsonResult;

                        });

            },

            fetchAvaialbeCustomers() {

                var path = "../Orders/AvaialbeCustomers";
                this.fetchJson(path, jsonResult => {this.AvaialbeCustomers = jsonResult;});
            },

            Validate() {this.Action("Validate");},
            Save() {this.Action("Save");},
            Action(action) {
                var myJSON = JSON.stringify(this.order);
                var path = "../Orders/" + action + "?id=" + this.id + "&json=" + myJSON;
                this.fetchJson(path, jsonResult => {
                    this.errors = jsonResult.Errors;
                    this.IsChanged = jsonResult.IsChanged;
                });
            },
            fetchJson(path, collback) {
                try {
                    fetch(path, { mode: 'cors' })
                        .then(response => response.json())
                        .then(function (json){ collback(json); }
                        );
                } catch (ex) {
                    alert(ex);
                }
            },
            setValue:function(){
              //  this.oldOrder.ShipCountry = this.order.ShipCountry;
                this.oldOrder.ShipCity =  this.order.ShipCity;
            }
        },
        watch: {
            order: {
                handler: function (after, before) {
                // console.log(this.oldOrder.ShipCity + '==>' + after.ShipCity);
                 console.log(this.oldOrder.ShipCountry + '==>' + after.ShipCountry);
                    if (this.oldOrder.ShipCountry !== after.ShipCountry) {

                        this.fetchCityList();
                    }
                   this.setValue();
                   this.Validate();
                },
                deep: true
            },
            errors: function (newV, old) {
               //  console.log(this.oldOrder.ShipCity + '==>' + );
                console.log("err=" + this.errors.ShipCity);
 console.log(this.errors );
            }

        },
        mounted: function() {
            this.fetchOrder();
            this.setValue();
            this.fetchCountrys();
            this.fetchAvaialbeCustomers();
        }
    });
    </script>
</body>
</html>
