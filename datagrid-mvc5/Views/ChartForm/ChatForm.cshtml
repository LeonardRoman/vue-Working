@inherits System.Web.Mvc.WebViewPage
<!DOCTYPE html>
<html>
<head>

    <script src="~/Scripts/jquery-1.10.2.min.js"></script>
    <script src="~/Scripts/jquery.signalR-2.4.1.min.js"></script>
    <script src="~/Scripts/vue.js"></script>
    <script src="~/signalr/hubs"></script>
    <title>SignalR Simple Chat</title>
    <style type="text/css">
        .container {
            background-color: #99CCFF;
            border: thick solid #808080;
            padding: 20px;
            margin: 20px;
        }

        .layer {
            overflow: auto; /* Добавляем полосы прокрутки */
            height: 150px; /* Высота блока */
            padding: 5px; /* Поля вокруг текста */
            border: solid 1px black; /* Параметры рамки */
        }

        .item {
            margin: 2px;
            padding: 2px; /* Поля вокруг текста */
            border: double 1px black; /* Параметры рамки */
            background-color: #66CCFF;
        }

        .p1 {
            margin: 2px;
            padding: 2px; /* Поля вокруг текста */
        }

        .nam {
            color: red;
            font-size: large;
            /* margin-block-end: 13px;*/
        }

        .dat {
            color: brown;
            font-size: medium;
            font-style: oblique;
            float: right;
            /* margin-block-end: 13px;*/
        }

        /*.item:hover {
            box-shadow: inset 0 0 0 3px #a3a593;
            cursor: pointer;
        }*/

        textarea {
            margin: 2px;
            width: 99%;
            border: transparent;
        }
    </style>
</head>
<body>
    <div class="container" id="chatForm">

        <div id="scroll" class="layer">
            <div class="item" v-for="(item,num) in messages" :v-key="item" 
                 v-bind:style="getStyle(item.Status)"
                 v-on:click="setMessageReaded(item.Id,item.Status)"
                 >
                <p class="p1">
                    {{num}})
                    <span class="nam">{{item.SenderName}}</span>
                    {{item.Status}}
                    <span class="dat"> {{item.CrDate}}</span>
                </p>
                <pre class="p1">{{item.Message}}</pre>

            </div>
        </div>
        <textarea v-model="message" oninput="auto_grow(this)"></textarea>
        <input type="button" v-on:click="sendMessage()" value="Send" :disabled="message.length==0" />

    </div>

    <script type="text/javascript">

        $.connection.hub.error(function (error) {
            console.log('SignalR error: ' + error);
        });

        function scrollSmoothToBottom(id) {
            var div = document.getElementById(id);
            $('#' + id).animate({
                scrollTop: div.scrollHeight
            }, 500);
        }

        function auto_grow(element) {

            element.style.height = "5px";
            element.style.height = (element.scrollHeight) + "px";
            var form = document.getElementById('chatForm');
            form.style.height = "5px";
            form.style.height = (form.scrollHeight) + "px";
        }

        var chat = $.connection.chatHub;
        var vue = new Vue({
            el: "#chatForm",
            data: {
                messages: [],
                message: ''
            },
            methods: {
                //читаем объект
                fetchMessages: function () {

                    var fe = this.fetch;
                    $.connection.hub.start().done(function () {
                        chat.server.getMessages().done(function (val) { fe(val); });
                    });
                },
                fetch: function (val) {
                    this.messages = val;
                },
                getStyle: function (status) {
                    if (status < 2) {
                        return {'background-color':'red',color:'white',cursor: 'pointer',};
                    } else {
                       return {'background-color':'grey'};
                    }
                },
                setMessageReaded:function(id,status) {
                    if (status < 2) {
                        chat.server.setMessageReaded(id);
                    }
                },

                sendMessage: function () {
                    if (this.message.length > 0) { chat.server.send(this.message); }
                },
                broadcastMessage: function (message) {
                    this.messages.push(message);
                    scrollSmoothToBottom('scroll');
                },
                changeMessageStatus: function (messageId, status) {
                    for (var i = 0; i < this.messages.length; i++) {
                        var mess = this.messages[i];
                        if (mess.Id === messageId) {
                            mess.Status = status;
                            break;
                        }
                    }
                },
                error: function (error) {
                    console.log('SignalR error: ' + error);
                }
            },

            mounted: function () {
                this.fetchMessages();//начитываю сообщения
                chat.client.broadcastMessage = this.broadcastMessage;
                chat.client.changeMessageStatus = this.changeMessageStatus;
                $.connection.hub.error = this.error;
            }
        });
    </script>
</body>
</html>